{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/new-product/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { Pool } from \"pg\";\n\n// const pool = new Pool({\n//   user: \"postgres\",\n//   host: \"localhost\",\n//   database: \"ondemand\",\n//   password: \"9599\",\n//   port: 5432,\n// });\n\nconst pool = new Pool({\n  user: \"stockedit\",\n  host: \"localhost\",\n  database: \"stockinfo\",\n  password: \"oru2ioFaPugheec7\",\n  port: 5433,\n});\n\nasync function checkDatabaseConnection() {\n  const client = await pool.connect();\n  try {\n    console.log(\"Database connected successfully!\");\n\n    // Query to list all tables in the database\n    const tablesQuery = `\n      SELECT tablename \n      FROM pg_catalog.pg_tables \n      WHERE schemaname != 'pg_catalog' AND schemaname != 'information_schema';\n    `;\n    const tablesResult = await client.query(tablesQuery);\n    console.log(\"Tables in the database:\", tablesResult.rows);\n  } catch (error) {\n    console.error(\"Error connecting to the database:\", error);\n  } finally {\n    client.release();\n  }\n}\n\nasync function insertOrUpdateRAMDIMMStick(\n  RAM_type,\n  RAM_generation,\n  RAM_speed,\n  RAM_capacity,\n  new_quantity\n) {\n  const client = await pool.connect();\n  try {\n    const checkQuery = `\n      SELECT \"quantity\" FROM \"ram_dimm_sticks\" \n      WHERE \"ram_type\" = $1 AND \"ram_generation\" = $2 AND \"ram_speed\" = $3 AND \"ram_capacity\" = $4\n    `;\n    const checkResult = await client.query(checkQuery, [\n      RAM_type,\n      RAM_generation,\n      RAM_speed,\n      RAM_capacity,\n    ]);\n\n    if (checkResult.rows.length > 0) {\n      const currentQuantity = checkResult.rows[0].quantity;\n      const newTotalQuantity = currentQuantity + new_quantity;\n\n      const updateQuery = `\n        UPDATE public.\"ram_dimm_sticks\" \n        SET quantity = $1 \n        WHERE \"ram_type\" = $2 AND \"ram_generation\" = $3 AND \"ram_speed\" = $4 AND \"ram_capacity\" = $5\n      `;\n      await client.query(updateQuery, [\n        newTotalQuantity,\n        RAM_type,\n        RAM_generation,\n        RAM_speed,\n        RAM_capacity,\n      ]);\n      return \"Quantity updated successfully!\";\n    } else {\n      const insertQuery = `\n        INSERT INTO public.\"ram_dimm_sticks\" (\"ram_type\", \"ram_generation\", \"ram_speed\", \"ram_capacity\", quantity)\n        VALUES ($1, $2, $3, $4, $5)\n      `;\n      await client.query(insertQuery, [\n        RAM_type,\n        RAM_generation,\n        RAM_speed,\n        RAM_capacity,\n        new_quantity,\n      ]);\n      return \"New row inserted successfully!\";\n    }\n  } finally {\n    client.release();\n  }\n}\n\nexport async function POST(req) {\n  try {\n    const { ramType, ramGeneration, ramSpeed, ramCapacity, quantity } =\n      await req.json();\n    console.log(\n      \"Ram Type: \",\n      ramType,\n      \"\\nGeneration: \",\n      ramGeneration,\n      \"\\nSpeed: \",\n      ramSpeed,\n      \"\\nCapacity: \",\n      ramCapacity,\n      \"\\nQuantity: \",\n      quantity\n    );\n\n    const result = await insertOrUpdateRAMDIMMStick(\n      ramType,\n      ramGeneration,\n      ramSpeed,\n      ramCapacity,\n      parseInt(quantity)\n    );\n\n    return NextResponse.json(\n      {\n        success: true,\n        message: result,\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error(\"Error submitting RAM DIMM Stick details:\", error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to submit RAM DIMM Stick details\",\n      },\n      { status: 500 }\n    );\n  }\n}\n\ncheckDatabaseConnection();\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,0BAA0B;AAC1B,sBAAsB;AACtB,uBAAuB;AACvB,0BAA0B;AAC1B,sBAAsB;AACtB,gBAAgB;AAChB,MAAM;AAEN,MAAM,OAAO,IAAI,2FAAA,CAAA,OAAI,CAAC;IACpB,MAAM;IACN,MAAM;IACN,UAAU;IACV,UAAU;IACV,MAAM;AACR;AAEA,eAAe;IACb,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,2CAA2C;QAC3C,MAAM,cAAc,CAAC;;;;IAIrB,CAAC;QACD,MAAM,eAAe,MAAM,OAAO,KAAK,CAAC;QACxC,QAAQ,GAAG,CAAC,2BAA2B,aAAa,IAAI;IAC1D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;IACrD,SAAU;QACR,OAAO,OAAO;IAChB;AACF;AAEA,eAAe,2BACb,QAAQ,EACR,cAAc,EACd,SAAS,EACT,YAAY,EACZ,YAAY;IAEZ,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,MAAM,aAAa,CAAC;;;IAGpB,CAAC;QACD,MAAM,cAAc,MAAM,OAAO,KAAK,CAAC,YAAY;YACjD;YACA;YACA;YACA;SACD;QAED,IAAI,YAAY,IAAI,CAAC,MAAM,GAAG,GAAG;YAC/B,MAAM,kBAAkB,YAAY,IAAI,CAAC,EAAE,CAAC,QAAQ;YACpD,MAAM,mBAAmB,kBAAkB;YAE3C,MAAM,cAAc,CAAC;;;;MAIrB,CAAC;YACD,MAAM,OAAO,KAAK,CAAC,aAAa;gBAC9B;gBACA;gBACA;gBACA;gBACA;aACD;YACD,OAAO;QACT,OAAO;YACL,MAAM,cAAc,CAAC;;;MAGrB,CAAC;YACD,MAAM,OAAO,KAAK,CAAC,aAAa;gBAC9B;gBACA;gBACA;gBACA;gBACA;aACD;YACD,OAAO;QACT;IACF,SAAU;QACR,OAAO,OAAO;IAChB;AACF;AAEO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,GAC/D,MAAM,IAAI,IAAI;QAChB,QAAQ,GAAG,CACT,cACA,SACA,kBACA,eACA,aACA,UACA,gBACA,aACA,gBACA;QAGF,MAAM,SAAS,MAAM,2BACnB,SACA,eACA,UACA,aACA,SAAS;QAGX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAEA"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}