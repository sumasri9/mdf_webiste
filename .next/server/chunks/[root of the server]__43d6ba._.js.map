{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/drives/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { Pool } from \"pg\";\n\n// const pool = new Pool({\n//   user: \"postgres\",\n//   host: \"localhost\",\n//   database: \"ondemand\",\n//   password: \"9599\",\n//   port: 5432,\n// });\n\nconst pool = new Pool({\n  user: \"stockedit\",\n  host: \"localhost\",\n  database: \"stockinfo\",\n  password: \"oru2ioFaPugheec7\",\n  port: 5433,\n});\n\n// Function to insert or update drive details\nasync function insertOrUpdateDrive(\n  ssd_type,\n  hdd_type,\n  form_factor,\n  capacity,\n  new_quantity\n) {\n  const client = await pool.connect();\n  try {\n    // Determine the type of drive (SSD or HDD)\n    const typeColumn = ssd_type ? \"ssd_type\" : \"hdd_type\";\n    const typeValue = ssd_type || hdd_type;\n\n    // Check if the entry already exists in the database\n    const checkQuery = `\n      SELECT \"quantity\"\n      FROM public.\"drives\"\n      WHERE \"${typeColumn}\" = $1 AND \"form_factor\" = $2 AND \"capacity\" = $3\n    `;\n    const checkResult = await client.query(checkQuery, [\n      typeValue,\n      form_factor,\n      capacity,\n    ]);\n\n    if (checkResult.rows.length > 0) {\n      // Update the quantity if the entry exists\n      const currentQuantity = checkResult.rows[0].quantity;\n      const newTotalQuantity = currentQuantity + new_quantity;\n\n      const updateQuery = `\n        UPDATE public.\"drives\"\n        SET \"quantity\" = $1\n        WHERE \"${typeColumn}\" = $2 AND \"form_factor\" = $3 AND \"capacity\" = $4\n      `;\n      await client.query(updateQuery, [\n        newTotalQuantity,\n        typeValue,\n        form_factor,\n        capacity,\n      ]);\n      return \"Quantity updated successfully!\";\n    } else {\n      // Insert a new entry if it does not exist\n      const insertQuery = `\n        INSERT INTO public.\"drives\" (\"ssd_type\", \"hdd_type\", \"form_factor\", \"capacity\", \"quantity\")\n        VALUES ($1, $2, $3, $4, $5)\n      `;\n      await client.query(insertQuery, [\n        ssd_type,\n        hdd_type,\n        form_factor,\n        capacity,\n        new_quantity,\n      ]);\n      return \"New row inserted successfully!\";\n    }\n  } catch (error) {\n    console.error(\"Error inserting or updating drive:\", error);\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n\n// Handle POST requests to add or update drive details\nexport async function POST(req) {\n  try {\n    const { ssdType, hddType, formFactor, capacity, quantity } =\n      await req.json();\n\n    console.log(\n      \"Received data:\",\n      \"\\nSSD Type:\",\n      ssdType || \"NULL\",\n      \"\\nHDD Type:\",\n      hddType || \"NULL\",\n      \"\\nForm Factor:\",\n      formFactor,\n      \"\\nCapacity:\",\n      capacity,\n      \"\\nQuantity:\",\n      quantity\n    );\n\n    const result = await insertOrUpdateDrive(\n      ssdType || null,\n      hddType || null,\n      formFactor,\n      capacity,\n      parseInt(quantity)\n    );\n\n    return NextResponse.json(\n      {\n        success: true,\n        message: result,\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error(\"Error handling POST request:\", error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to process the request\",\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,0BAA0B;AAC1B,sBAAsB;AACtB,uBAAuB;AACvB,0BAA0B;AAC1B,sBAAsB;AACtB,gBAAgB;AAChB,MAAM;AAEN,MAAM,OAAO,IAAI,2FAAA,CAAA,OAAI,CAAC;IACpB,MAAM;IACN,MAAM;IACN,UAAU;IACV,UAAU;IACV,MAAM;AACR;AAEA,6CAA6C;AAC7C,eAAe,oBACb,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,QAAQ,EACR,YAAY;IAEZ,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,2CAA2C;QAC3C,MAAM,aAAa,WAAW,aAAa;QAC3C,MAAM,YAAY,YAAY;QAE9B,oDAAoD;QACpD,MAAM,aAAa,CAAC;;;aAGX,EAAE,WAAW;IACtB,CAAC;QACD,MAAM,cAAc,MAAM,OAAO,KAAK,CAAC,YAAY;YACjD;YACA;YACA;SACD;QAED,IAAI,YAAY,IAAI,CAAC,MAAM,GAAG,GAAG;YAC/B,0CAA0C;YAC1C,MAAM,kBAAkB,YAAY,IAAI,CAAC,EAAE,CAAC,QAAQ;YACpD,MAAM,mBAAmB,kBAAkB;YAE3C,MAAM,cAAc,CAAC;;;eAGZ,EAAE,WAAW;MACtB,CAAC;YACD,MAAM,OAAO,KAAK,CAAC,aAAa;gBAC9B;gBACA;gBACA;gBACA;aACD;YACD,OAAO;QACT,OAAO;YACL,0CAA0C;YAC1C,MAAM,cAAc,CAAC;;;MAGrB,CAAC;YACD,MAAM,OAAO,KAAK,CAAC,aAAa;gBAC9B;gBACA;gBACA;gBACA;gBACA;aACD;YACD,OAAO;QACT;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,MAAM;IACR,SAAU;QACR,OAAO,OAAO;IAChB;AACF;AAGO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,GACxD,MAAM,IAAI,IAAI;QAEhB,QAAQ,GAAG,CACT,kBACA,eACA,WAAW,QACX,eACA,WAAW,QACX,kBACA,YACA,eACA,UACA,eACA;QAGF,MAAM,SAAS,MAAM,oBACnB,WAAW,MACX,WAAW,MACX,YACA,UACA,SAAS;QAGX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}