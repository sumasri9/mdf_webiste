{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/cmos_battery/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { Pool } from \"pg\";\n\n// PostgreSQL connection configuration\nconst pool = new Pool({\n  user: \"stockedit\",\n  host: \"localhost\",\n  database: \"stockinfo\",\n  password: \"oru2ioFaPugheec7\",\n  port: 5433,\n});\n\n// Function to insert or update CMOS battery quantity\nasync function insertOrUpdateCMOSQuantity(newQuantity) {\n  const client = await pool.connect();\n  try {\n    // Check if there is an existing quantity\n    const checkQuery = `\n      SELECT \"cmos_quantity\"\n      FROM single_components\n    `;\n    const checkResult = await client.query(checkQuery);\n\n    if (checkResult.rows.length > 0) {\n      // Update the quantity if a record exists\n      const currentQuantity = checkResult.rows[0].cmos_quantity || 0;\n      const updatedQuantity = currentQuantity + newQuantity;\n\n      const updateQuery = `\n        UPDATE single_components\n        SET cmos_quantity = $1\n      `;\n      await client.query(updateQuery, [updatedQuantity]);\n      return \"CMOS battery quantity updated successfully!\";\n    } else {\n      // Insert a new entry if no record exists\n      const insertQuery = `\n        INSERT INTO single_components (cmos_quantity)\n        VALUES ($1)\n      `;\n      await client.query(insertQuery, [newQuantity]);\n      return \"New CMOS battery quantity inserted successfully!\";\n    }\n  } catch (error) {\n    console.error(\"Error inserting or updating CMOS battery quantity:\", error);\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n\n// Handle POST requests for CMOS battery quantity\nexport async function POST(req) {\n  try {\n    const { quantity } = await req.json();\n\n    console.log(\"Received CMOS battery quantity:\", quantity);\n\n    const result = await insertOrUpdateCMOSQuantity(parseInt(quantity));\n\n    return NextResponse.json(\n      {\n        success: true,\n        message: result,\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error(\"Error handling POST request:\", error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to process the request\",\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,sCAAsC;AACtC,MAAM,OAAO,IAAI,2FAAA,CAAA,OAAI,CAAC;IACpB,MAAM;IACN,MAAM;IACN,UAAU;IACV,UAAU;IACV,MAAM;AACR;AAEA,qDAAqD;AACrD,eAAe,2BAA2B,WAAW;IACnD,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,yCAAyC;QACzC,MAAM,aAAa,CAAC;;;IAGpB,CAAC;QACD,MAAM,cAAc,MAAM,OAAO,KAAK,CAAC;QAEvC,IAAI,YAAY,IAAI,CAAC,MAAM,GAAG,GAAG;YAC/B,yCAAyC;YACzC,MAAM,kBAAkB,YAAY,IAAI,CAAC,EAAE,CAAC,aAAa,IAAI;YAC7D,MAAM,kBAAkB,kBAAkB;YAE1C,MAAM,cAAc,CAAC;;;MAGrB,CAAC;YACD,MAAM,OAAO,KAAK,CAAC,aAAa;gBAAC;aAAgB;YACjD,OAAO;QACT,OAAO;YACL,yCAAyC;YACzC,MAAM,cAAc,CAAC;;;MAGrB,CAAC;YACD,MAAM,OAAO,KAAK,CAAC,aAAa;gBAAC;aAAY;YAC7C,OAAO;QACT;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sDAAsD;QACpE,MAAM;IACR,SAAU;QACR,OAAO,OAAO;IAChB;AACF;AAGO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,QAAQ,GAAG,CAAC,mCAAmC;QAE/C,MAAM,SAAS,MAAM,2BAA2B,SAAS;QAEzD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}