{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sumasriatheti/Downloads/mdf_website/mdf_webiste/src/app/new_product/page.jsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\n\nconst NewProduct = () => {\n  const [productName, setProductName] = useState(\"\");\n  const [driveType, setDriveType] = useState(\"\");\n  const [hddType, setHddType] = useState(\"\");\n  const [formFactor, setFormFactor] = useState(\"\");\n  const [hddCapacity, setHddCapacity] = useState(\"\");\n  const [ssdType, setSsdType] = useState(\"\");\n  const [ssdCapacity, setSsdCapacity] = useState(\"\");\n  const [cardType, setCardType] = useState(\"\");\n  const [networkType, setNetworkType] = useState(\"\");\n  const [pcieCapacity, setPcieCapacity] = useState(\"\");\n  const [pciePortType, setPciePortType] = useState(\"\");\n  const [ibSpeed, setIbSpeed] = useState(\"\");\n  const [ibPortType, setIbPortType] = useState(\"\");\n  const [ndcCapacity, setNdcCapacity] = useState(\"\");\n  const [ndcPortType, setNdcPortType] = useState(\"\");\n  const [ramType, setRamType] = useState(\"\");\n  const [ramGeneration, setRamGeneration] = useState(\"\");\n  const [ramSpeed, setRamSpeed] = useState(\"\");\n  const [ramCapacity, setRamCapacity] = useState(\"\");\n  const [quantity, setQuantity] = useState(0);\n  const [ssdFormFactor, setSsdFormFactor] = useState(\"\");\n\n  const productOptions = [\n    \"cards\",\n    \"cables\",\n    \"drives\",\n    \"cmosBatteries\",\n    \"ramDimm\",\n  ];\n  const driveTypes = [\"hdd\", \"ssd\"];\n  const hddTypes = [\"sata\", \"nlsas\", \"10k\", \"15k\"];\n  const formFactors = [\"2.5\", \"3.5\"];\n  const ssdTypes = [\"sata\", \"vsas\", \"sas\", \"nvme\"];\n  const ssdFormFactorsMap = {\n    sata: [\"2.5 inch\"],\n    vsas: [\"2.5 inch\"],\n    sas: [\"2.5 inch\"],\n    nvme: [\"m.2\", \"pcie\"],\n  };\n  const ssdCapacities = [\n    \"120GB\",\n    \"200GB\",\n    \"240GB\",\n    \"400GB\",\n    \"480GB\",\n    \"800GB\",\n    \"960GB\",\n    \"1.6TB\",\n    \"1.92TB\",\n    \"3.2TB\",\n    \"3.84TB\",\n    \"6.4TB\",\n    \"7.68TB\",\n    \"15.36TB\",\n    \"30.72TB\",\n    \"61.44TB\",\n    \"100TB\",\n  ];\n  const hddCapacitiesMap = {\n    sata: {\n      2.5: [\n        \"1 TB\",\n        \"2 TB\",\n        \"4 TB\",\n        \"6 TB\",\n        \"8 TB\",\n        \"10 TB\",\n        \"12 TB\",\n        \"14 TB\",\n        \"16 TB\",\n        \"18 TB\",\n        \"20 TB\",\n        \"22 TB\",\n        \"24 TB\",\n        \"30 TB (coming)\",\n        \"32 TB (coming)\",\n      ],\n      3.5: [\n        \"1 TB\",\n        \"2 TB\",\n        \"4 TB\",\n        \"6 TB\",\n        \"8 TB\",\n        \"10 TB\",\n        \"12 TB\",\n        \"14 TB\",\n        \"16 TB\",\n        \"18 TB\",\n        \"20 TB\",\n        \"22 TB\",\n        \"24 TB\",\n        \"30 TB (coming)\",\n        \"32 TB (coming)\",\n      ],\n    },\n    nlsas: {\n      2.5: [\n        \"1 TB\",\n        \"2 TB\",\n        \"4 TB\",\n        \"6 TB\",\n        \"8 TB\",\n        \"10 TB\",\n        \"12 TB\",\n        \"14 TB\",\n        \"16 TB\",\n        \"18 TB\",\n        \"20 TB\",\n        \"22 TB\",\n        \"24 TB\",\n        \"30 TB (coming)\",\n        \"32 TB (coming)\",\n      ],\n      3.5: [\n        \"1 TB\",\n        \"2 TB\",\n        \"4 TB\",\n        \"6 TB\",\n        \"8 TB\",\n        \"10 TB\",\n        \"12 TB\",\n        \"14 TB\",\n        \"16 TB\",\n        \"18 TB\",\n        \"20 TB\",\n        \"22 TB\",\n        \"24 TB\",\n        \"30 TB (coming)\",\n        \"32 TB (coming)\",\n      ],\n    },\n    \"10k\": {\n      2.5: [\"300GB\", \"600GB\", \"1.2 TB\", \"2.4 TB\"],\n      3.5: [\n        \"1 TB\",\n        \"2 TB\",\n        \"4 TB\",\n        \"6 TB\",\n        \"8 TB\",\n        \"10 TB\",\n        \"12 TB\",\n        \"14 TB\",\n        \"16 TB\",\n        \"18 TB\",\n        \"20 TB\",\n        \"22 TB\",\n        \"24 TB\",\n        \"30 TB (coming)\",\n        \"32 TB (coming)\",\n      ],\n    },\n    \"15k\": {\n      2.5: [\"300GB\", \"600GB\", \"1.2 TB\", \"2.4 TB\"],\n      3.5: [\n        \"1 TB\",\n        \"2 TB\",\n        \"4 TB\",\n        \"6 TB\",\n        \"8 TB\",\n        \"10 TB\",\n        \"12 TB\",\n        \"14 TB\",\n        \"16 TB\",\n        \"18 TB\",\n        \"20 TB\",\n        \"22 TB\",\n        \"24 TB\",\n        \"30 TB (coming)\",\n        \"32 TB (coming)\",\n      ],\n    },\n  };\n\n  const cardTypes = [\"network\", \"raid\", \"boss\"];\n  const networkTypes = [\"pcie\", \"ndc\"];\n  const pcieCapacities = [\"gigi\", \"25gig\", \"10gig\", \"ib\"];\n  const portTypes = [\"single\", \"dual\", \"quad\"];\n  const ibSpeeds = [\"fdr\", \"hdr\"];\n  const ramTypes = [\"rdimm\", \"lrdimm\", \"hbm\", \"cxl\"];\n  const ramGenerations = [\"ddr3\", \"ddr4\", \"ddr5\", \"mcr\", \"cxl\"];\n  const ramSpeeds = [\n    \"1333\",\n    \"1600\",\n    \"1866\",\n    \"2133\",\n    \"2400\",\n    \"2666\",\n    \"3200\",\n    \"4800\",\n    \"5600\",\n    \"8800\",\n  ];\n  const ramCapacities = [\n    \"4GB\",\n    \"8GB\",\n    \"16GB\",\n    \"32GB\",\n    \"64GB\",\n    \"96GB\",\n    \"128GB\",\n    \"256GB\",\n    \"512GB\",\n  ];\n\n  useEffect(() => {\n    if (productName === \"drives\") {\n      setCardType(\"\");\n      setNetworkType(\"\");\n      setPcieCapacity(\"\");\n      setPciePortType(\"\");\n      setIbSpeed(\"\");\n      setIbPortType(\"\");\n      setNdcCapacity(\"\");\n      setNdcPortType(\"\");\n      setRamType(\"\");\n      setRamGeneration(\"\");\n      setRamSpeed(\"\");\n      setRamCapacity(\"\");\n    } else if (productName === \"cards\") {\n      setDriveType(\"\");\n      setHddType(\"\");\n      setFormFactor(\"\");\n      setHddCapacity(\"\");\n      setSsdType(\"\");\n      setSsdCapacity(\"\");\n      setSsdFormFactor(\"\");\n      setRamType(\"\");\n      setRamGeneration(\"\");\n      setRamSpeed(\"\");\n      setRamCapacity(\"\");\n    } else if (productName === \"ramDimm\") {\n      setDriveType(\"\");\n      setHddType(\"\");\n      setFormFactor(\"\");\n      setHddCapacity(\"\");\n      setSsdType(\"\");\n      setSsdCapacity(\"\");\n      setSsdFormFactor(\"\");\n      setCardType(\"\");\n      setNetworkType(\"\");\n      setPcieCapacity(\"\");\n      setPciePortType(\"\");\n      setIbSpeed(\"\");\n      setIbPortType(\"\");\n      setNdcCapacity(\"\");\n      setNdcPortType(\"\");\n    }\n  }, [productName]);\n\n  // useEffect(() => {\n  //   if (driveType === \"hdd\") {\n  //     setSsdType(\"\");\n  //     setSsdCapacity(\"\");\n  //     setSsdFormFactor(\"\");\n  //   } else if (driveType === \"ssd\") {\n  //     setHddType(\"\");\n  //     // setFormFactor(\"\");\n  //     setHddCapacity(\"\");\n  //   }\n  // }, [driveType]);\n  useEffect(() => {\n    if (driveType === \"hdd\") {\n      setFormFactor(\"\"); // Reset form factor for HDD\n    } else if (driveType === \"ssd\") {\n      setFormFactor(\"\"); // Reset form factor for SSD\n    }\n  }, [driveType]);\n\n  // useEffect(() => {\n  //   if (ssdType) {\n  //     setSsdFormFactor(\"\");\n  //   }\n  // }, [ssdType]);\n\n  useEffect(() => {\n    setHddCapacity(\"\");\n  }, [hddType, formFactor]);\n\n  useEffect(() => {\n    if (cardType === \"network\") {\n      // Reset other card-related fields\n    } else {\n      setNetworkType(\"\");\n      setPcieCapacity(\"\");\n      setPciePortType(\"\");\n      setIbSpeed(\"\");\n      setIbPortType(\"\");\n      setNdcCapacity(\"\");\n      setNdcPortType(\"\");\n    }\n  }, [cardType]);\n\n  useEffect(() => {\n    if (networkType === \"pcie\") {\n      setNdcCapacity(\"\");\n      setNdcPortType(\"\");\n    } else if (networkType === \"ndc\") {\n      setPcieCapacity(\"\");\n      setPciePortType(\"\");\n      setIbSpeed(\"\");\n      setIbPortType(\"\");\n    }\n  }, [networkType]);\n\n  useEffect(() => {\n    if ([\"gigi\", \"25gig\", \"10gig\"].includes(pcieCapacity)) {\n      setIbSpeed(\"\");\n      setIbPortType(\"\");\n    } else if (pcieCapacity === \"ib\") {\n      setPciePortType(\"\");\n    }\n  }, [pcieCapacity]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    let formData;\n    let apiEndpoint = \"/api/ram_dimm\";\n\n    if (productName === \"cmosBatteries\") {\n      formData = {\n        quantity: parseInt(quantity),\n      };\n      apiEndpoint = \"/api/cmos_battery\";\n    }\n    if (productName === \"drives\") {\n      // Handle drive-specific data\n      formData = {\n        ssdType: driveType === \"ssd\" ? ssdType : null,\n        hddType: driveType === \"hdd\" ? hddType : null,\n        formFactor,\n        // ssdFormFactor,\n        capacity: driveType === \"ssd\" ? ssdCapacity : hddCapacity,\n        quantity: parseInt(quantity),\n      };\n      apiEndpoint = \"/api/drives\";\n    } else if (productName === \"ramDimm\") {\n      // Handle RAM-specific data\n      formData = {\n        ramType,\n        ramGeneration,\n        ramSpeed,\n        ramCapacity,\n        quantity: parseInt(quantity),\n      };\n    } else if (productName === \"cards\") {\n      // Handle card-specific data\n      formData = {\n        cardType,\n        networkType,\n        pcieCapacity,\n        pciePortType,\n        ibSpeed,\n        ibPortType,\n        ndcCapacity,\n        ndcPortType,\n        quantity: parseInt(quantity),\n      };\n    }\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      console.log(\"Success:\", result);\n      // You can add further actions here, such as showing a success message or resetting the form\n    } catch (error) {\n      console.log(\"Error:\", error);\n      // You can add error handling here, such as showing an error message to the user\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-red-600 to-yellow-100 text-gray-800 font-sans\">\n      <form\n        onSubmit={handleSubmit}\n        className=\"flex flex-col w-80 bg-white bg-opacity-80 p-6 rounded-lg shadow-lg\"\n      >\n        <h1 className=\"text-2xl font-bold mb-4 text-center\">\n          Add/Remove Product\n        </h1>\n\n        <select\n          value={productName}\n          onChange={(e) => setProductName(e.target.value)}\n          required\n          className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n        >\n          <option value=\"\">Select Product</option>\n          {productOptions.map((option) => (\n            <option key={option} value={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n\n        {productName === \"drives\" && (\n          <>\n            <select\n              value={driveType}\n              onChange={(e) => setDriveType(e.target.value)}\n              className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n            >\n              <option value=\"\">Select Drive Type</option>\n              {driveTypes.map((type) => (\n                <option key={type} value={type}>\n                  {type.toUpperCase()}\n                </option>\n              ))}\n            </select>\n\n            {driveType === \"hdd\" && (\n              <>\n                <select\n                  value={hddType}\n                  onChange={(e) => setHddType(e.target.value)}\n                  className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                >\n                  {hddTypes.map((type) => (\n                    <option key={type} value={type}>\n                      {type.toUpperCase()}\n                    </option>\n                  ))}\n                </select>\n\n                <select\n                  value={formFactor}\n                  onChange={(e) => setFormFactor(e.target.value)}\n                  className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                >\n                  {formFactors.map((factor) => (\n                    <option key={factor} value={factor}>\n                      {factor} inch\n                    </option>\n                  ))}\n                </select>\n\n                {/* {hddCapacity && (\n                  <select\n                    value={hddCapacity}\n                    onChange={(e) => setHddCapacity(e.target.value)}\n                    className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                  >\n                    {[\n                      \"1 TB\",\n                      \"2 TB\",\n                      \"4 TB\",\n                      \"6 TB\",\n                      \"8 TB\",\n                      \"10 TB\",\n                      \"12 TB\",\n                      \"14 TB\",\n                      \"16 TB\",\n                      \"18 TB\",\n                      \"20 TB\",\n                      \"22 TB\",\n                      \"24 TB\",\n                      \"30 TB\",\n                      \"32 TB\",\n                    ].map((capacity) => (\n                      <option key={capacity} value={capacity}>\n                        {capacity}\n                      </option>\n                    ))}\n                  </select>\n                )} */}\n                {hddType && formFactor && (\n                  <select\n                    value={hddCapacity}\n                    onChange={(e) => setHddCapacity(e.target.value)}\n                    className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                  >\n                    <option value=\"\">Select HDD Capacity</option>\n                    {hddCapacitiesMap[hddType]?.[formFactor]?.map(\n                      (capacity) => (\n                        <option key={capacity} value={capacity}>\n                          {capacity}\n                        </option>\n                      )\n                    )}\n                  </select>\n                )}\n              </>\n            )}\n\n            {/* {driveType === \"ssd\" && (\n              <>\n                <select\n                  value={ssdType}\n                  onChange={(e) => setSsdType(e.target.value)}\n                  className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                >\n                  {ssdTypes.map((type) => (\n                    <option key={type} value={type}>\n                      {type.toUpperCase()}\n                    </option>\n                  ))}\n                </select>\n\n                <select\n                  value={ssdCapacity}\n                  onChange={(e) => setSsdCapacity(e.target.value)}\n                  className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                >\n                  {ssdCapacities.map((capacity) => (\n                    <option key={capacity} value={capacity}>\n                      {capacity}\n                    </option>\n                  ))}\n                </select>\n              </>\n            )} */}\n            {driveType === \"ssd\" && (\n              <>\n                <select\n                  value={ssdType}\n                  onChange={(e) => setSsdType(e.target.value)}\n                  className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                >\n                  <option value=\"\">Select SSD Type</option>\n                  {ssdTypes.map((type) => (\n                    <option key={type} value={type}>\n                      {type.toUpperCase()}\n                    </option>\n                  ))}\n                </select>\n\n                {ssdType && (\n                  <select\n                    value={ssdFormFactor}\n                    onChange={(e) => setSsdFormFactor(e.target.value)}\n                    className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                  >\n                    <option value=\"\">Select SSD Form Factor</option>\n                    {ssdFormFactorsMap[ssdType]?.map((factor) => (\n                      <option key={factor} value={factor}>\n                        {factor}\n                      </option>\n                    ))}\n                  </select>\n                )}\n\n                <select\n                  value={ssdCapacity}\n                  onChange={(e) => setSsdCapacity(e.target.value)}\n                  className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                >\n                  <option value=\"\">Select SSD Capacity</option>\n                  {ssdCapacities.map((capacity) => (\n                    <option key={capacity} value={capacity}>\n                      {capacity}\n                    </option>\n                  ))}\n                </select>\n              </>\n            )}\n          </>\n        )}\n\n        {productName === \"cards\" && (\n          <>\n            <select\n              value={cardType}\n              onChange={(e) => setCardType(e.target.value)}\n              className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n            >\n              <option value=\"\">Select Card Type</option>\n              {cardTypes.map((type) => (\n                <option key={type} value={type}>\n                  {type}\n                </option>\n              ))}\n            </select>\n\n            {cardType === \"network\" && (\n              <>\n                <select\n                  value={networkType}\n                  onChange={(e) => setNetworkType(e.target.value)}\n                  className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                >\n                  <option value=\"\">Select Network Type</option>\n                  {networkTypes.map((type) => (\n                    <option key={type} value={type}>\n                      {type.toUpperCase()}\n                    </option>\n                  ))}\n                </select>\n\n                {networkType === \"pcie\" && (\n                  <>\n                    <select\n                      value={pcieCapacity}\n                      onChange={(e) => setPcieCapacity(e.target.value)}\n                      className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                    >\n                      {pcieCapacities.map((capacity) => (\n                        <option key={capacity} value={capacity}>\n                          {capacity}\n                        </option>\n                      ))}\n                    </select>\n\n                    {[\"gigi\", \"25gig\", \"10gig\"].includes(pcieCapacity) && (\n                      <select\n                        value={pciePortType}\n                        onChange={(e) => setPciePortType(e.target.value)}\n                        className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                      >\n                        {portTypes.map((type) => (\n                          <option key={type} value={type}>\n                            {type} Port\n                          </option>\n                        ))}\n                      </select>\n                    )}\n\n                    {pcieCapacity === \"ib\" && (\n                      <>\n                        <select\n                          value={ibSpeed}\n                          onChange={(e) => setIbSpeed(e.target.value)}\n                          className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                        >\n                          {ibSpeeds.map((speed) => (\n                            <option key={speed} value={speed}>\n                              {speed.toUpperCase()}\n                            </option>\n                          ))}\n                        </select>\n\n                        <select\n                          value={ibPortType}\n                          onChange={(e) => setIbPortType(e.target.value)}\n                          className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                        >\n                          {portTypes.slice(0, 2).map((type) => (\n                            <option key={type} value={type}>\n                              {type} Port\n                            </option>\n                          ))}\n                        </select>\n                      </>\n                    )}\n                  </>\n                )}\n\n                {networkType === \"ndc\" && (\n                  <>\n                    <select\n                      value={ndcCapacity}\n                      onChange={(e) => setNdcCapacity(e.target.value)}\n                      className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                    >\n                      {pcieCapacities.slice(0, 3).map((capacity) => (\n                        <option key={capacity} value={capacity}>\n                          {capacity}\n                        </option>\n                      ))}\n                    </select>\n\n                    <select\n                      value={ndcPortType}\n                      onChange={(e) => setNdcPortType(e.target.value)}\n                      className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n                    >\n                      {portTypes.map((type) => (\n                        <option key={type} value={type}>\n                          {type} Port\n                        </option>\n                      ))}\n                    </select>\n                  </>\n                )}\n              </>\n            )}\n          </>\n        )}\n\n        {productName === \"ramDimm\" && (\n          <>\n            <select\n              value={ramType}\n              onChange={(e) => setRamType(e.target.value)}\n              className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n            >\n              <option value=\"\">Select RAM Type</option>\n              {ramTypes.map((type) => (\n                <option key={type} value={type}>\n                  {type.toUpperCase()}\n                </option>\n              ))}\n            </select>\n\n            <select\n              value={ramGeneration}\n              onChange={(e) => setRamGeneration(e.target.value)}\n              className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n            >\n              <option value=\"\">Select Generation</option>\n              {ramGenerations.map((gen) => (\n                <option key={gen} value={gen}>\n                  {gen.toUpperCase()}\n                </option>\n              ))}\n            </select>\n\n            <select\n              value={ramSpeed}\n              onChange={(e) => setRamSpeed(e.target.value)}\n              className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n            >\n              <option value=\"\">Select RAM Speed</option>\n              {ramSpeeds.map((speed) => (\n                <option key={speed} value={speed}>\n                  {speed} MT/s\n                </option>\n              ))}\n            </select>\n\n            <select\n              value={ramCapacity}\n              onChange={(e) => setRamCapacity(e.target.value)}\n              className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n            >\n              <option value=\"\">Select RAM Capacity</option>\n              {ramCapacities.map((capacity) => (\n                <option key={capacity} value={capacity}>\n                  {capacity}\n                </option>\n              ))}\n            </select>\n          </>\n        )}\n\n        <input\n          type=\"number\"\n          value={quantity}\n          onChange={(e) => setQuantity(e.target.value)}\n          placeholder=\"Quantity\"\n          required\n          className=\"p-2 mb-4 text-base border-none rounded-md bg-white\"\n        />\n\n        <button\n          type=\"submit\"\n          className=\"py-3 px-6 text-base cursor-pointer border-none bg-green-500 text-white rounded-full transition-all duration-300 shadow-md hover:bg-green-600 hover:scale-105\"\n        >\n          Add Product\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default NewProduct;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1037, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}